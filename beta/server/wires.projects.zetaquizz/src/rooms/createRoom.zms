macroscript createRoom(
	string name = "Unknown",
	string password = "default",
	number delay = ROOM_CLOSE_DELAY,
	number questions = NUMBER_OF_QUESTIONS
) {
	
	var id = str:rnd36(6);
	
	var {result: {group: room}} = sudo zpUtils::GLOBAL_OWNER call zpGroupRecipe::createGroup({
		name: name,
		id: id,
		metadata: {
			creator: __userKey,
			openDelay: delay*1000,
			open: true,
			password: str:md5(password),
			createdAt: time:now()
		},
		members: []
	}) hardFail;
	
	// Scheduling room closure
	
	sudo zpUtils::GLOBAL_OWNER scheduler.setTimeout({
		"parameter" : {
			"name": "closeRoom",
			"parameters": {"id": room.id}
		},
		"deploymentId" : code,
		"verb" : "call",
		"delay" : delay
	});
	
	// Scheduling questions sequence
	
	var k = 0;
	
	while (k < questions) {
		
		var delayOfQuestion = delay + 5 + k * (ANSWERING_TIME + 2);
		
		sudo zpUtils::GLOBAL_OWNER scheduler.setTimeout({
			"parameter": {
				"name": "sendQuestion",
				"parameters": {"room": room.id, "remaining": questions - (k+1)}
			},
			"deploymentId": code,
			"verb": "call",
			"delay": delayOfQuestion
		});	

		k += 1;
	}

	
	
	// Scheduling room destruction
	
	var taskName = "destroy_" + room.id;
	
	sudo zpUtils::GLOBAL_OWNER scheduler.schedule({
		"cronName": taskName,
		"parameter" : {
			"name": "destroyRoom",
			"parameters": {"id": room.id}
		},
		"deploymentId" : code,
		"verb" : "call",
		"schedule" : time:now() + ROOM_DESTROY_DELAY
	});
	
} return { room } on channel __selfName